Cambiando los fondos
Apuntes de Git
from: https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things (it contains the book)
        videos
        book (it saved in the web file in desktop)

pwd
    print the route of the actual directory

git restore --staged <file name>
    restablece lo eliminado

mv <old_file_name> <new_file_name>
    changes the name of the file

.env
    file that you create por database, but for security is important create also a file .gitignore an specify in it all the files and directorys we don´t want to inlude in the repository, we do that for security rasons
    when you commit the gitignore is with the pooint before I mean .gitignore

git status -s
    its shows the list of all the files we had modifie or change

git diff
    It shows all the chages we have done, but very specify

git diff --staged
    shows all the changes that are in the staged fase

Other commands or combinatios with git log, taked from: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
    -p 
        Show the patch introduced with each commit.
    --stat
        Show statistics for files modified in each commit.
    --shortstat
        Display only the changed/insertions/deletions line from the --stat command.
    --name-only
        Show the list of files modified after the commit information.
    --name-status
        Show the list of files affected with added/modified/deleted information as well
    --abbrev-commit
        Show only the first few characters of the SHA-1 checksum instead of all 40.
    --relative-date
        Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.
    --graph
        Display an ASCII graph of the branch and merge history beside the log output.
    --pretty
        Show commits in an alternate format. Option values include oneline, short, full, fuller, and format (where you specify your own format).
    --oneline
        Shorthand for --pretty=oneline --abbrev-commit used together

Options to limit the output of git log taked it from: https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History
    -<n>
        Show only the last n commits
    --since, --after
        Limit the commits to those made after the specified date.
    --until, --before
        Limit the commits to those made before the specified date.
    --author
        Only show commits in which the author entry matches the specified string.
    --committer
        Only show commits in which the committer entry matches the specified string.
    --grep
        Only show commits with a commit message containing the string
    -S
        Only show commits adding or removing code matching the string

git commit --amend <file_name>
    This command takes your staging area and uses it for the commit, it opens you a file in the VS to change or to add comtheing you have forgotten to the commit

git remote -v
    Shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote

fetch - to give to you back a file you want to recuperate
    git fetch <remote>
        To get data from your remote projects

to inspect something
    git remote show origin

Renaming and Removing Remotes
    git remote rename pb <paul>
    git remote remove paul

git tag
    To show you a list
        git tag -l <"v1.8.5*">
    Annotated Tags
        git tag -a <v1.4> -m <"my version 1.4">

abbreviation
    git commit
        git ci
    git checkout
        git co
    git status
        git st
    git branch 
        git br

git last
    you can see the last commit easily

git --help
    shows you all the git commands

To make a new commit in the brancj
    git commit -a -m <made other changes>

Creating a new branch - This doesn´t changes you to the new branch you already create
    git branch <name>

To create a new branch and switch to it at the same time
    git co -b <brand name>

To move between branches
    git co <branch or master or main>

To merge
    git merge <branch name>

To delete a branch because ypu finish and everything is ok
    git branch -d <hotfix>

To know all the branch you have created
    git branch

To see the last commit on each branch
    git branch -v

To see which branches are already merged into the branch you’re on
    git branch --merged

To see all the branches that contain work you haven’t yet merged in
    git branch --no-merged

Changing a branch name
    Be careful!
    Do not rename branches that are still in use by other collaborators. Do not rename a branch like master/main/mainline without having read the section "Changing the master branch name".

    Rename a branch (it couldn´t be active)
    git branch --move <bad-branch-name> <corrected-branch-name>
    ...then you have to push it, because if you not the change only will be local
        git push --set-upstream origin <corrected-branch-name>
    ... then to checkout with branchs we have
        git branch --all
    ...you can rename the master branch name, but for that case I prefered look at the boos before that to be sure
        git branch --move master main
        git push --set-upstream origin main
        